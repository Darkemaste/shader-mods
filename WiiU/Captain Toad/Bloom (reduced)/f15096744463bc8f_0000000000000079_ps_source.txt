//Bloom reduced. 40%.
#version 400
#extension GL_ARB_texture_gather : enable
// shader f15096744463bc8f
uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4f0c000 res 640x360x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x5) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
in vec4 passParameter0;
in vec4 passParameter1;
in vec4 passParameter2;
layout(location = 0) out vec4 passPixelColor0;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R123i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
int loopStuckCounter = 0;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameter0);
R1i = floatBitsToInt(passParameter1);
R2i = floatBitsToInt(passParameter2);
R3i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R2i.yx)).xyzw);
R4i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R1i.yx)).xyzw);
R5i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.yx)).xyzw);
R6i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.wx)).xyzw);
R0i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.zx)).xyzw);
R1i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R1i.zx)).xyzw);
R2i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R2i.zx)).xyzw);
// 0
R123i.x = floatBitsToInt((intBitsToFloat(R3i.w) * intBitsToFloat(0x3b500000) + 0.0));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(R3i.z) * intBitsToFloat(0x3b500000) + 0.0));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(R3i.y) * intBitsToFloat(0x3b500000) + 0.0));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(R3i.x) * intBitsToFloat(0x3b500000) + 0.0));
PV0i.w = R123i.w;
// 1
R123i.x = floatBitsToInt((intBitsToFloat(R4i.w) * intBitsToFloat(0x3d8f0000) + intBitsToFloat(PV0i.x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(R4i.z) * intBitsToFloat(0x3d8f0000) + intBitsToFloat(PV0i.y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(R4i.y) * intBitsToFloat(0x3d8f0000) + intBitsToFloat(PV0i.z)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(R4i.x) * intBitsToFloat(0x3d8f0000) + intBitsToFloat(PV0i.w)));
PV1i.w = R123i.w;
// 2
R123i.x = floatBitsToInt((intBitsToFloat(R5i.w) * intBitsToFloat(0x3ea0e000) + intBitsToFloat(PV1i.x)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(R5i.z) * intBitsToFloat(0x3ea0e000) + intBitsToFloat(PV1i.y)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(R5i.y) * intBitsToFloat(0x3ea0e000) + intBitsToFloat(PV1i.z)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(R5i.x) * intBitsToFloat(0x3ea0e000) + intBitsToFloat(PV1i.w)));
PV0i.w = R123i.w;
// 3
R123i.x = floatBitsToInt((intBitsToFloat(R6i.w) * intBitsToFloat(0x3e670000) + intBitsToFloat(PV0i.x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(R6i.z) * intBitsToFloat(0x3e670000) + intBitsToFloat(PV0i.y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(R6i.y) * intBitsToFloat(0x3e670000) + intBitsToFloat(PV0i.z)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(R6i.x) * intBitsToFloat(0x3e670000) + intBitsToFloat(PV0i.w)));
PV1i.w = R123i.w;
// 4
R123i.x = floatBitsToInt((intBitsToFloat(R0i.w) * intBitsToFloat(0x3ea0e000) + intBitsToFloat(PV1i.x)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(R0i.z) * intBitsToFloat(0x3ea0e000) + intBitsToFloat(PV1i.y)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(R0i.y) * intBitsToFloat(0x3ea0e000) + intBitsToFloat(PV1i.z)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(R0i.x) * intBitsToFloat(0x3ea0e000) + intBitsToFloat(PV1i.w)));
PV0i.w = R123i.w;
// 5
R123i.x = floatBitsToInt((intBitsToFloat(R1i.w) * intBitsToFloat(0x3d8f0000) + intBitsToFloat(PV0i.x)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(R1i.z) * intBitsToFloat(0x3d8f0000) + intBitsToFloat(PV0i.y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(R1i.y) * intBitsToFloat(0x3d8f0000) + intBitsToFloat(PV0i.z)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((intBitsToFloat(R1i.x) * intBitsToFloat(0x3d8f0000) + intBitsToFloat(PV0i.w)));
PV1i.w = R123i.w;
// 6
backupReg0i = R2i.x;
backupReg1i = R2i.y;
backupReg2i = R2i.z;
backupReg3i = R2i.w;
R2i.x = floatBitsToInt((intBitsToFloat(backupReg0i) * intBitsToFloat(0x3b500000) + intBitsToFloat(PV1i.w))*0.4);
PV0i.x = R2i.x;
R2i.y = floatBitsToInt((intBitsToFloat(backupReg1i) * intBitsToFloat(0x3b500000) + intBitsToFloat(PV1i.z))*0.4);
PV0i.y = R2i.y;
R2i.z = floatBitsToInt((intBitsToFloat(backupReg2i) * intBitsToFloat(0x3b500000) + intBitsToFloat(PV1i.y))*0.4);
PV0i.z = R2i.z;
R2i.w = floatBitsToInt((intBitsToFloat(backupReg3i) * intBitsToFloat(0x3b500000) + intBitsToFloat(PV1i.x)));
PV0i.w = R2i.w;
// export
passPixelColor0 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
}
