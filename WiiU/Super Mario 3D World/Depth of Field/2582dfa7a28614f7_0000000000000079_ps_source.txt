//Disabled depth of field (world map, part 2).
#version 400
#extension GL_ARB_texture_gather : enable
// shader 2582dfa7a28614f7
uniform ivec4 uf_remappedPS[1];
uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4f0c000 res 640x360x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
in vec4 passParameter0;
in vec4 passParameter1;
layout(location = 0) out vec4 passPixelColor0;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
discard;
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[31];
bool activeMaskStackC[32];
int activeMaskIndex = 0;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
int loopStuckCounter = 0;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameter0);
R1i = floatBitsToInt(passParameter1);
if( activeMaskStackC[activeMaskIndex+1] == true ) {
// 0
predResult = (intBitsToFloat(R1i.z) != 0.0);
activeMaskIndex++;
activeMaskStack[activeMaskIndex] = predResult;
activeMaskStackC[activeMaskIndex+1] = predResult == true && activeMaskStackC[activeMaskIndex] == true;
}
else {
activeMaskIndex++;
activeMaskStack[activeMaskIndex] = false;
activeMaskStackC[activeMaskIndex+1] = false;
}
if( activeMaskStackC[activeMaskIndex+1] == true ) {
// 0
R2i.x = floatBitsToInt(intBitsToFloat(R1i.z) * intBitsToFloat(uf_remappedPS[0].x));
R2i.x = clampFI32(R2i.x);
PV0i.x = R2i.x;
R0i.w = floatBitsToInt((intBitsToFloat(R1i.z) * intBitsToFloat(uf_remappedPS[0].y) + -(1.0)));
PV0i.w = R0i.w;
}
if( activeMaskStackC[activeMaskIndex+1] == true ) {
R3i.xyz = floatBitsToInt(textureLod(textureUnitPS0, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w)).xyz);
}
if( activeMaskStackC[activeMaskIndex+1] == true ) {
// 0
R3i.w = floatBitsToInt((intBitsToFloat(R1i.y) * intBitsToFloat(R2i.x) + intBitsToFloat(R1i.x)));
PV0i.w = R3i.w;
}
activeMaskStack[activeMaskIndex] = activeMaskStack[activeMaskIndex] == false;
activeMaskStackC[activeMaskIndex+1] = activeMaskStack[activeMaskIndex] == true && activeMaskStackC[activeMaskIndex] == true;
if( activeMaskStackC[activeMaskIndex+1] == true ) {
// 0
if(  (0 == 0)) discard;
}
activeMaskIndex--;
activeMaskStackC[activeMaskIndex+1] = activeMaskStack[activeMaskIndex] == true && activeMaskStackC[activeMaskIndex] == true;
// export
passPixelColor0 = vec4(intBitsToFloat(R3i.x), intBitsToFloat(R3i.y), intBitsToFloat(R3i.z), intBitsToFloat(R3i.w));
}
