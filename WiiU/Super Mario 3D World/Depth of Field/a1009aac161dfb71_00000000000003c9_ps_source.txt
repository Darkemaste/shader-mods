//Disabled depth of field (some stages, like 5-6).
#version 400
#extension GL_ARB_texture_gather : enable
// shader a1009aac161dfb71
uniform ivec4 uf_remappedPS[5];
uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4441000 res 1280x720x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
uniform sampler2D textureUnitPS1;// Tex1 addr 0xf4f0c000 res 640x360x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x2) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
in vec4 passParameter0;
layout(location = 0) out vec4 passPixelColor0;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
discard;
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[31];
bool activeMaskStackC[32];
int activeMaskIndex = 0;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
int loopStuckCounter = 0;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameter0);
if( activeMaskStackC[activeMaskIndex+1] == true ) {
R1i.x = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.xy)).x);
}
if( activeMaskStackC[activeMaskIndex+1] == true ) {
// 0
R123i.x = floatBitsToInt((-(intBitsToFloat(R1i.x)) * intBitsToFloat(uf_remappedPS[0].y) + intBitsToFloat(uf_remappedPS[0].x)));
PV0i.x = R123i.x;
// 1
R1i.z = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
PS1i = R1i.z;
// 2
R0i.w = floatBitsToInt((intBitsToFloat(PS1i) * intBitsToFloat(uf_remappedPS[1].x) + intBitsToFloat(uf_remappedPS[2].x)));
R0i.w = clampFI32(R0i.w);
PV0i.w = R0i.w;
// 3
predResult = (intBitsToFloat(R0i.w) != 0.0);
activeMaskIndex++;
activeMaskStack[activeMaskIndex] = predResult;
activeMaskStackC[activeMaskIndex+1] = predResult == true && activeMaskStackC[activeMaskIndex] == true;
}
else {
activeMaskIndex++;
activeMaskStack[activeMaskIndex] = false;
activeMaskStackC[activeMaskIndex+1] = false;
}
if( activeMaskStackC[activeMaskIndex+1] == true ) {
// 0
backupReg0i = R0i.w;
backupReg0i = R0i.w;
R0i.w = floatBitsToInt((intBitsToFloat(backupReg0i) * intBitsToFloat(uf_remappedPS[3].y) + -(1.0)));
PV0i.w = R0i.w;
R2i.w = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(uf_remappedPS[3].x));
R2i.w = clampFI32(R2i.w);
PS0i = R2i.w;
}
if( activeMaskStackC[activeMaskIndex+1] == true ) {
R0i.xyz = floatBitsToInt(textureLod(textureUnitPS1, intBitsToFloat(R0i.xy),intBitsToFloat(R0i.w)).xyz);
}
if( activeMaskStackC[activeMaskIndex+1] == true ) {
// 0
R123i.x = floatBitsToInt((intBitsToFloat(R1i.z) * intBitsToFloat(uf_remappedPS[1].z) + intBitsToFloat(uf_remappedPS[2].z)));
R123i.x = clampFI32(R123i.x);
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(R1i.z) * intBitsToFloat(uf_remappedPS[1].w) + intBitsToFloat(uf_remappedPS[2].w)));
R123i.y = clampFI32(R123i.y);
PV0i.y = R123i.y;
PS0i = floatBitsToInt(intBitsToFloat(R0i.z) * intBitsToFloat(0x3dea7371));
// 1
R123i.x = floatBitsToInt((intBitsToFloat(R0i.y) * intBitsToFloat(0x3f162c23) + intBitsToFloat(PS0i)));
PV1i.x = R123i.x;
R127i.w = floatBitsToInt(min(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.y)));
PV1i.w = R127i.w;
// 2
R127i.y = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(uf_remappedPS[3].w));
PV0i.y = R127i.y;
R123i.z = floatBitsToInt((intBitsToFloat(R0i.x) * intBitsToFloat(0x3e990afe) + intBitsToFloat(PV1i.x)));
PV0i.z = R123i.z;
// 3
backupReg0i = R0i.x;
backupReg1i = R0i.z;
PV1i.x = floatBitsToInt(-(intBitsToFloat(backupReg0i)) + intBitsToFloat(PV0i.z));
PV1i.z = floatBitsToInt(-(intBitsToFloat(backupReg1i)) + intBitsToFloat(PV0i.z));
PV1i.w = floatBitsToInt(-(intBitsToFloat(R0i.y)) + intBitsToFloat(PV0i.z));
// 4
backupReg0i = R127i.y;
backupReg0i = R127i.y;
R127i.x = floatBitsToInt((intBitsToFloat(PV1i.w) * intBitsToFloat(R127i.y) + intBitsToFloat(R0i.y)));
PV0i.x = R127i.x;
R127i.y = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(backupReg0i) + intBitsToFloat(R0i.x)));
PV0i.y = R127i.y;
R126i.w = floatBitsToInt((intBitsToFloat(PV1i.z) * intBitsToFloat(backupReg0i) + intBitsToFloat(R0i.z)));
PV0i.w = R126i.w;
// 5
R123i.x = floatBitsToInt((intBitsToFloat(PV0i.w) * intBitsToFloat(uf_remappedPS[4].z) + -(intBitsToFloat(PV0i.w))));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((intBitsToFloat(PV0i.x) * intBitsToFloat(uf_remappedPS[4].y) + -(intBitsToFloat(PV0i.x))));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((intBitsToFloat(PV0i.y) * intBitsToFloat(uf_remappedPS[4].x) + -(intBitsToFloat(PV0i.y))));
PV1i.z = R123i.z;
// 6
R2i.x = floatBitsToInt((intBitsToFloat(PV1i.z) * intBitsToFloat(R127i.w) + intBitsToFloat(R127i.y)));
PV0i.x = R2i.x;
R2i.y = floatBitsToInt((intBitsToFloat(PV1i.y) * intBitsToFloat(R127i.w) + intBitsToFloat(R127i.x)));
PV0i.y = R2i.y;
R2i.z = floatBitsToInt((intBitsToFloat(PV1i.x) * intBitsToFloat(R127i.w) + intBitsToFloat(R126i.w)));
PV0i.z = R2i.z;
}
activeMaskStack[activeMaskIndex] = activeMaskStack[activeMaskIndex] == false;
activeMaskStackC[activeMaskIndex+1] = activeMaskStack[activeMaskIndex] == true && activeMaskStackC[activeMaskIndex] == true;
if( activeMaskStackC[activeMaskIndex+1] == true ) {
// 0
if(  (0 == 0)) discard;
}
activeMaskIndex--;
activeMaskStackC[activeMaskIndex+1] = activeMaskStack[activeMaskIndex] == true && activeMaskStackC[activeMaskIndex] == true;
// export
passPixelColor0 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
}
